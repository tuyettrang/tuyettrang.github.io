;; This file was generated by the Behaviour Composer at modelling4all.org on Thu Feb 07 08:05:55 UTC 2019
;; The model can be found at http://m.modelling4all.org/m/?frozen=Wzv3PKcxsrcVAipUBECC6a

breed [objects object]

turtles-own [
 my-bid
 my-ask
 my-optimism
 my-money
 my-initial-money
 my-shares
 my-initial-shares
 my-fundamental-value
 my-pen-plot-name
 ]

breed [pens pen]

globals [
 the-best-bid
 the-last-transaction-price
 the-best-ask
 the-best-ask-agent
 the-best-bid-agent
 the-buyer
 the-seller
 the-price-history
]
to setup
   clear-all
   add-agents population-size
   ;ask patches [set pcolor white]
   set the-last-transaction-price 100
   set the-price-history []
   layout-circle turtles 10
   reset-ticks
end

to add-agents [number-of-agents]
   create-turtles number-of-agents [ set my-money 1000 ;round random-normal 1000 30
                       set my-initial-money my-money
                       set my-shares 10 ;one-of[ 0 100 ]
                       set my-initial-shares my-shares
                       set shape "circle"
    if-else random-float 100 < percentage-rationals

    [ set my-fundamental-value round random-normal 100 fundamental-value-std
      set color blue
      set my-pen-plot-name word "pen-of-" who
    ]
    [ set my-fundamental-value 0
      set color pink
    ]
  ]
end

to go
  ;set the-best-ask 0
  ;set the-best-bid 0
  ask turtles with [my-fundamental-value = 0]
  [ speculate ]
  ask turtles with [my-fundamental-value > 0]
  [ rationalize ]
  set the-price-history fput the-last-transaction-price the-price-history
  ;ask turtles [set my-optimism one-of [ 1 0 -1 ]]
  ;let optimists turtles with [ my-optimism = 1 ]
  ;let pessimists turtles with [ my-optimism = -1 ]
  ;ask turtles [ifelse my-optimism = 1
  ;  [decide-my-bid enter-bid]
  ; [ if my-optimism = -1 [decide-my-ask enter-ask]]]
  ask turtles [set ycor (my-shares - 10) / 4
               set xcor (my-money - 1000) / 1000
               set size net-worth / 2000
  ]
  if random-float 100 < entry-odds [add-agents 1]
  tick
end

to plot-trader-net-worth
  ask turtles with [my-type = "trader"]
 [create-temporary-plot-pen my-pen-plot-name
  set-plot-pen-color scale-color blue my-fundamental-value 50 150
  plotxy ticks net-worth ]
end

to speculate
  if length the-price-history < 2 [stop]
  if-else item 0 the-price-history >= item 1 the-price-history
     [decide-my-bid enter-bid]
   [if item 0 the-price-history < item 1 the-price-history and my-shares > 0
     [decide-my-ask enter-ask]]
end

to rationalize
  if-else  the-last-transaction-price < my-fundamental-value
     [decide-my-bid enter-bid]
   [if the-last-transaction-price > my-fundamental-value and my-shares > 0
     [decide-my-ask enter-ask]]
end

to decide-my-bid
  set my-ask 0
  if-else the-best-ask > 0
       [ set my-bid the-best-ask]
       [if-else the-best-bid > 0
           [ set my-bid
                 the-best-bid + 1 ]
           [ set my-bid
      the-last-transaction-price ] ]
 if-else my-money >= my-bid
  [
                    ;; reset the best-bid
                      set the-best-bid
                          my-bid
                      set the-best-bid-agent
                          self
    if print-log [
      output-print ( word my-type " " who " set their bid " my-bid " at time " ticks " and money = " my-money " and shares = " my-shares)]]
  [set my-bid 0]
end

to-report my-type
  ifelse my-fundamental-value = 0 [report "speculator"]
                              [report "trader"]
end

to-report net-worth
  report my-money + (my-shares * the-last-transaction-price)
end

to-report speculator-net-worth
  report mean [net-worth] of turtles with [my-type = "speculator"]
end

to-report trader-net-worth
  report mean [net-worth] of turtles with [my-type = "trader"]
end

to decide-my-ask
  set my-bid 0
  if my-shares < 1 [stop]
  if-else the-best-bid > 0 [
           set my-ask the-best-bid]
           [if-else the-best-ask > 0
             [ set my-ask
                 the-best-ask - 1 ]
             [ set my-ask
                 the-last-transaction-price ] ]

                    ;; reset the best-ask
                      set the-best-ask
                          my-ask
                      set the-best-ask-agent
                          self
  if print-log [
    output-print ( word my-type " " who " set their ask " my-ask " at time " ticks " and money = " my-money " and shares = " my-shares)]
end

to record-transaction
                    ; Add a log message to the log area.
  if the-buyer != 0 and the-seller != 0 and print-transaction
           [
              output-print ( word "Time " ticks " price is " the-last-transaction-price " the buyer " [who] of the-buyer " " [my-type] of the-buyer " and the seller was " [who] of the-seller " " [my-type] of the-seller) ]
end


to enter-bid
          ; Enter a bid

      if ( my-bid >= the-best-ask and the-best-ask > 0)
               ;;  bid > current best Ask, trade takes place

               [ let transaction-price
                     the-best-ask
                     ;; update buyer
                 set my-money
                     ( my-money - transaction-price )
                 set my-shares
                     ( my-shares + 1 )
                 set my-bid 0
    ;output-print (word who " my money " my-money " my shares " my-shares " time " ticks " bid " )
                     ;; update seller
                 ask the-best-ask-agent
                     [ set my-money
                           ( my-money + transaction-price )
                       set my-shares
                           ( my-shares - 1 )
                       set my-ask 0
    ;output-print (word who " my money " my-money " my shares " my-shares " time " ticks " bid " )
    ]
                           ;; update globals, data, and graphs
                 set the-last-transaction-price
                     transaction-price
                 set the-best-ask 0
                 set the-best-bid 0
                 set the-buyer self
                 set the-seller the-best-ask-agent
                 record-transaction
  ]
                     ;; bid < current best Ask (or no current Ask), set new best bid


end

to enter-ask
          ; Enter a ask

      if ( my-ask >= the-best-bid and the-best-bid > 0)
               ;;  ask > current best Bid, trade takes place

               [ let transaction-price
                     the-best-bid
                 set my-money
                     ( my-money + transaction-price )
                 set my-shares
                     ( my-shares - 1 )
    ;output-print (word who " my money " my-money " my shares " my-shares " time " ticks " ask " )
                 ask the-best-bid-agent
                     [ set my-money
                           ( my-money - transaction-price )
                       set my-shares
                           ( my-shares + 1 )
    ;output-print (word who " my money " my-money " my shares " my-shares " time " ticks " ask ")
    ]
                           ;; update globals, data, and graphs
                 set the-last-transaction-price
                     transaction-price
                 set the-best-bid 0
                 set the-best-ask 0
                 set the-seller self
                 set the-buyer the-best-bid-agent
                 record-transaction
  ]
                     ;; ask < current best Bid (or no current Bid), set new best ask


end
@#$#@#$#@
GRAPHICS-WINDOW
202
12
788
599
-1
-1
27.524
1
10
1
1
1
0
1
1
1
-10
10
-10
10
1
1
1
time
30.0

BUTTON
5
5
66
40
SETUP
setup
NIL
1
T
OBSERVER
NIL
S
NIL
NIL
1

BUTTON
5
45
66
80
GO
go
T
1
T
OBSERVER
NIL
G
NIL
NIL
1

OUTPUT
813
13
1418
436
13

PLOT
790
486
1091
684
Price
time
price
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"stock-price" 1.0 0 -16777216 true "" "plot the-last-transaction-price"
"trader/10" 1.0 0 -13791810 true "" "plot trader-net-worth / 10"
"speculator/10" 1.0 0 -2064490 true "" "plot speculator-net-worth / 10"

SLIDER
6
248
201
281
population-size
population-size
0
100
10.0
1
1
NIL
HORIZONTAL

SLIDER
6
207
201
240
percentage-rationals
percentage-rationals
0
100
63.0
1
1
%
HORIZONTAL

SLIDER
6
289
201
322
fundamental-value-std
fundamental-value-std
0
60
89.0
1
1
NIL
HORIZONTAL

SWITCH
5
90
118
123
print-log
print-log
1
1
-1000

TEXTBOX
713
636
863
654
Money
11
0.0
1

PLOT
1094
486
1419
684
plot 1
time
net-worth
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot-trader-net-worth"

SWITCH
6
131
170
164
print-transaction
print-transaction
1
1
-1000

SLIDER
6
168
178
201
entry-odds
entry-odds
0
100
100.0
1
1
%
HORIZONTAL

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

person business
false
0
Rectangle -1 true false 120 90 180 180
Polygon -13345367 true false 135 90 150 105 135 180 150 195 165 180 150 105 165 90
Polygon -7500403 true true 120 90 105 90 60 195 90 210 116 154 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 183 153 210 210 240 195 195 90 180 90 150 165
Circle -7500403 true true 110 5 80
Rectangle -7500403 true true 127 76 172 91
Line -16777216 false 172 90 161 94
Line -16777216 false 128 90 139 94
Polygon -13345367 true false 195 225 195 300 270 270 270 195
Rectangle -13791810 true false 180 225 195 300
Polygon -14835848 true false 180 226 195 226 270 196 255 196
Polygon -13345367 true false 209 202 209 216 244 202 243 188
Line -16777216 false 180 90 150 165
Line -16777216 false 120 90 150 165
@#$#@#$#@
NetLogo 6.0.2
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="experiment 1" repetitions="10" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="100"/>
    <metric>the-last-transaction-price</metric>
    <metric>speculator-net-worth</metric>
    <metric>trader-net-worth</metric>
    <enumeratedValueSet variable="percentage-rationals">
      <value value="24"/>
      <value value="50"/>
      <value value="96"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="print-transaction">
      <value value="false"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="print-log">
      <value value="false"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="fundamental-value-std">
      <value value="57"/>
      <value value="21"/>
      <value value="89"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="population-size">
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
